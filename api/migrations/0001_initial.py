# Generated by Django 5.2.6 on 2025-09-09 06:29

import api.manager
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('dept_slno', models.AutoField(db_column='Dept_Slno', primary_key=True, serialize=False)),
                ('dept_code', models.CharField(db_column='Dept_code', max_length=45)),
                ('dept_name', models.CharField(db_column='Dept_name', max_length=1000)),
            ],
            options={
                'db_table': 'department',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('desig_slno', models.AutoField(db_column='Desig_Slno', primary_key=True, serialize=False)),
                ('desig_code', models.CharField(db_column='Desig_code', max_length=45)),
                ('desig_name', models.CharField(db_column='Desig_name', max_length=45)),
            ],
            options={
                'db_table': 'designation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('emp_id', models.AutoField(primary_key=True, serialize=False)),
                ('official_email', models.EmailField(help_text='Official email ending with kkhsou.in', max_length=254, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, help_text='10 digit phone number', max_length=10, null=True)),
                ('mobile', models.CharField(blank=True, help_text='10 digit mobile number', max_length=10, null=True)),
                ('name', models.CharField(max_length=100)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('dob', models.DateField(blank=True, help_text='Date of Birth', null=True)),
                ('doj', models.DateField(blank=True, help_text='Date of Joining', null=True)),
                ('aoc', models.CharField(blank=True, help_text='Address of the coresspondance', max_length=255, null=True)),
                ('aos', models.CharField(blank=True, help_text='Area of Specialization', max_length=255, null=True)),
                ('emp_category', models.CharField(choices=[('Examination', 'Examination'), ('Non Academic', 'Non Academic'), ('Academic', 'Academic'), ('Permanent', 'Permanent'), ('Contractual', 'Contractual'), ('Technical', 'Technical'), ('Others', 'Others')], max_length=20)),
                ('user_type', models.CharField(choices=[('Admin', 'Admin'), ('Employee', 'Employee')], default='Employee', max_length=20)),
                ('approved', models.BooleanField(default=False)),
                ('dept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.department')),
                ('designation', models.ForeignKey(db_column='designation_id', on_delete=django.db.models.deletion.CASCADE, to='api.designation')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', api.manager.EmployeeManager()),
            ],
        ),
    ]
